name: Build and Publish to NuGet

on:
  push:
    tags:
      - 'v*'  # This will trigger on version tags like v1.0.0, v2.1.0, etc.
  workflow_dispatch:  # Allow manual triggering

env:
  PACKAGE_NAME: XiansAi.Lib
  NUGET_SOURCE: https://api.nuget.org/v3/index.json

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Extract version from tag
      id: version
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix (e.g., 1.2.3 or 1.2.3-beta)"
          exit 1
        fi
        echo "Version format is valid: $VERSION"
        
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./XiansAi.Lib.Src
      
    - name: Clean solution
      run: dotnet clean
      working-directory: ./XiansAi.Lib.Src
      
    - name: Build solution
      run: dotnet build -c Release --no-restore
      working-directory: ./XiansAi.Lib.Src
      
    - name: Run tests
      run: dotnet test -c Release --no-build --verbosity normal
      working-directory: ./XiansAi.Lib.Tests
      
    - name: Pack NuGet packages
      run: |
        mkdir -p nupkg
        dotnet pack -c Release -o ./nupkg /p:Version=${{ steps.version.outputs.version }} --no-build
      working-directory: ./XiansAi.Lib.Src
      
    - name: Publish to NuGet
      run: |
        dotnet nuget push ./nupkg/${{ env.PACKAGE_NAME }}.${{ steps.version.outputs.version }}.nupkg \
          -s ${{ env.NUGET_SOURCE }} \
          -k ${{ secrets.NUGET_API_KEY }} \
          --skip-duplicate
      working-directory: ./XiansAi.Lib.Src
      
    - name: Generate build summary
      run: |
        echo "## ðŸ“¦ NuGet Package Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** \`${{ env.PACKAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**NuGet Package Manager:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`xml" >> $GITHUB_STEP_SUMMARY
        echo "<PackageReference Include=\"${{ env.PACKAGE_NAME }}\" Version=\"${{ steps.version.outputs.version }}\" />" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**dotnet CLI:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "dotnet add package ${{ env.PACKAGE_NAME }} --version ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PackageReference:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "Install-Package ${{ env.PACKAGE_NAME }} -Version ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY 